# thx to https://mastergroosha.github.io/telegram-tutorial-2/
# his repo: https://github.com/MasterGroosha/telegram-tutorial-2/tree/master/code
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import Text

# —Å–ø—Ä–∞–≤–∫–∞: https://docs-python.ru/packages/modul-requests-python/obekt-otvet-servera-response/
import requests

import json
# import app
from .app.handlers.sell_form import register_handlers_post
from .app.handlers.post_edit import register_handlers_edit
from .app.handlers.common import register_handlers_common
from .app.config_reader import load_config

from aiogram.contrib.fsm_storage.memory import MemoryStorage
import aiogram.utils.markdown as fmt

from telegram_bot_pagination import InlineKeyboardPaginator
from telegram_bot_pagination import InlineKeyboardButton

import os

# # –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
# bot = Bot(token="2079878449:AAFVO8sV6N2A7EJGIfrGmlijX8AwBEime0A")
# # –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
# dp = Dispatcher(bot, storage=MemoryStorage())

# –ª–æ–∫–∞–ª—å
# http://127.0.0.1:8000/

# admin local
# http://127.0.0.1:8000/admin/
# admin | admin

# –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
# https://habr.com/ru/post/485236/
config = load_config("bot/config/bot.ini")

# –û–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# https://docs.aiogram.dev/en/latest/dispatcher/index.html
bot = Bot(token=config.tg_bot.token)
dp = Dispatcher(bot, storage=MemoryStorage())


async def set_commands(bot: Bot):
    commands = [
        types.BotCommand(command="/start", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        # types.BotCommand(command="/cancel", description="–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    ]
    await bot.set_my_commands(commands)


# —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π
categories = {
    2: "–ê–ª–∫–æ–≥–æ–ª—å üç∑",
    13: "–ê–ø—Ç–µ–∫–∞ üíä",
    5: "–ù–∞–ø–∏—Ç–∫–∏ ü•§",
    4: "–ú–æ–ª–æ—á–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è ü•õ",
    6: "–î—Ä—É–≥–∏–µ —Å—ä–µ–¥–æ–±–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ‚ùî",
    8: "–¢–∞–±–∞—á–∫–∞ üö¨",
    3: "–ê–ø—Ç–µ–∫–∞ ü•°",
    9: "–î—Ä—É–≥–∏–µ –Ω–µ—Å—ä–µ–¥–æ–±–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ‚ùî",
    11: "–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏ ‚ùî",
    # 13: None# –∞–ø—Ç–µ–∫–∞ —Å—ä–µ–¥–æ–±–Ω—ã–µ
}
reversed_categories = {
    "–ê–ª–∫–æ–≥–æ–ª—å üç∑": 2,
    "–ê–ø—Ç–µ–∫–∞ üíä": 13,
    "–ù–∞–ø–∏—Ç–∫–∏ ü•§": 5,
    "–ú–æ–ª–æ—á–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è ü•õ": 4,
    "–î—Ä—É–≥–∏–µ —Å—ä–µ–¥–æ–±–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ‚ùî": 6,
    "–¢–∞–±–∞—á–∫–∞ üö¨": 8,
    "–ê–ø—Ç–µ–∫–∞ ü•°": 3,
    "–î—Ä—É–≥–∏–µ –Ω–µ—Å—ä–µ–¥–æ–±–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ‚ùî": 9,
    "–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏ ‚ùî": 11
}

statuses = {
    'A': '–ê–∫—Ç–∏–≤–Ω–æ',
    'S': '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
}


# –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö—ç–Ω–¥–ª–µ—Ä–∞
@dp.message_handler(commands="start")
@dp.message_handler(Text(equals=["–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]))
async def start(message: types.Message):
    # message - —Å–ø—Ä–∞–≤–∫–∞: https://docs.aiogram.dev/en/latest/telegram/types/message.html

    uid = message.from_user.id  # unique id
    tag = message.from_user.username  # tag
    fname = message.from_user.first_name
    lname = message.from_user.last_name
    if fname is None:
        fname = ' '
    if lname is None:
        lname = ' '
    if tag is None:
        tag = f'empty_tag_{uid}'

    # print(f"[{uid}] [{tag}] [{fname}] [{lname}]")
    buttons = [
        types.InlineKeyboardButton(text="–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data=f"own_{uid}"),
        types.InlineKeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ‚ù§Ô∏è", callback_data=f"favourite_{uid}")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)

    # user registration
    url = "http://127.0.0.1:8000/bot_users/"

    payload = json.dumps({
        "tg_id": uid,
        "nickname": tag,
        "first_name": fname,  # message.from_user.first_name if message.from_user.first_name non None else ' '
        "last_name": lname,
    })

    headers = {
        'Content-Type': 'application/json'
    }

    response = requests.request("POST", url, auth=('admin', 'admin'), headers=headers, data=payload)
    # print(response.text)
    # –¥–æ—Å—Ç–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ vk
    url = f"http://127.0.0.1:8000/bot_users/{uid}"
    response = requests.request("GET", url, headers=headers)
    # print(response.json())
    if response.json()["state"] == 'A':
        out = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {tag if not 'empty_tag' in tag else fname}! \n\n" \
              f"–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä - {uid}.\n\n" \
              f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ vk.com –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º/–ø—Ä–æ–¥–∞–≤—Ü–æ–º - {response.json()['vk_link']}\n\n" \
              f"‚ùó–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –í–ö, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—â–µ–Ω–∏—è.\n\n----\n" \
              f"Note: –ò–º–µ–Ω–Ω–æ –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, " \
              f"–∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –í–∞—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –í–∞–º–∏."
        await message.answer(out, reply_markup=keyboard, disable_web_page_preview=True)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è"]
        keyboard.add(*buttons)
        await message.answer("–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤ —Å–∞–º–æ–º –Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ üôÉ", reply_markup=keyboard)
    else:
        out = f"–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, {tag if not 'empty_tag' in tag else fname}.\n\n" \
              f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–æ—Ç–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª ‚ùå.\n\n" \
              f"–í—ã –º–æ–∂–µ—Ç–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. " \
              f"–î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @GSellSupport"
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!"]
        keyboard.add(*buttons)
        await message.answer(out, reply_markup=keyboard)


@dp.message_handler(Text(equals=["–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!"]))
async def case(message: types.Message):
    headers = {
        'Content-Type': 'application/json'
    }
    url = f"http://127.0.0.1:8000/bot_users/{message.from_user.id}"
    response = requests.request("GET", url, headers=headers)
    if response.json()["state"] == 'A':
        buttons = ["–ö—É–ø–∏—Ç—å", "–ü—Ä–æ–¥–∞—Ç—å", "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    else:
        buttons = ["–ö—É–ø–∏—Ç—å", "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*buttons)
    await message.answer("–ß—Ç–æ –ø–æ–∂–µ–ª–∞–µ—Ç–µ?", reply_markup=keyboard)


# buy beginning
@dp.message_handler(Text(equals=["–ö—É–ø–∏—Ç—å", "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞"]))
async def buy(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–°—ä–µ–¥–æ–±–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", "–ù–µ—Å—ä–µ–¥–æ–±–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", "–£—Å–ª—É–≥–∏", "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)


@dp.message_handler(Text(equals="–°—ä–µ–¥–æ–±–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"))
async def edible(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–ê–ª–∫–æ–≥–æ–ª—å üç∑", "–ê–ø—Ç–µ–∫–∞ üíä", "–ù–∞–ø–∏—Ç–∫–∏ ü•§", "–ú–æ–ª–æ—á–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è ü•õ", "–î—Ä—É–≥–∏–µ —Å—ä–µ–¥–æ–±–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ‚ùî", "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞"]
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)


@dp.message_handler(Text(equals="–ù–µ—Å—ä–µ–¥–æ–±–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"))
async def inedible(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–¢–∞–±–∞—á–∫–∞ üö¨", "–ê–ø—Ç–µ–∫–∞ ü•°", "–î—Ä—É–≥–∏–µ –Ω–µ—Å—ä–µ–¥–æ–±–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ‚ùî", "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞"]
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)


@dp.message_handler(Text(equals="–£—Å–ª—É–≥–∏"))
async def services(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏ ‚ùî", "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞"]
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)


@dp.message_handler(Text(equals=["–ê–ª–∫–æ–≥–æ–ª—å üç∑", "–ê–ø—Ç–µ–∫–∞ üíä", "–ù–∞–ø–∏—Ç–∫–∏ ü•§", "–ú–æ–ª–æ—á–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è ü•õ",
                                 "–î—Ä—É–≥–∏–µ —Å—ä–µ–¥–æ–±–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ‚ùî", "–¢–∞–±–∞—á–∫–∞ üö¨", "–ê–ø—Ç–µ–∫–∞ ü•°",
                                 "–î—Ä—É–≥–∏–µ –Ω–µ—Å—ä–µ–¥–æ–±–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ‚ùî", "–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏ ‚ùî"]))
async def listing(message: types.Message):

    url = f"http://127.0.0.1:8000/posts/?status=A&category={reversed_categories[message.text]}"
    headers = {
        'Authorization': 'Basic YWRtaW46YWRtaW4=',
        'Content-Type': 'application/json'
    }
    response = requests.request("GET", url, headers=headers, data={})
    # print(response.json())
    # join'–∏–º –ø—É—Ç—å –¥–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –ø—É—Ç—å –æ—Ç –Ω–µ–≥–æ –¥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ª–∏—Å—Ç–∏–Ω–≥
    with open(os.path.join("bot_data", "requested_posts", f"{message.from_user.id}.json"), 'w', encoding='utf-8') as f:
        # TODO —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–º.–≤—ã—à–µ
        json.dump({'posts': response.json()}, f)
    if not response.json():
        await message.answer("–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!")
    else:
        await send_post_page(message, page=1, user_id=message.from_user.id)
        # print(message.text)


# user_id == const
# pagination
# https://pypi.org/project/python-telegram-bot-pagination/
# https://habr.com/ru/post/501812/
# https://github.com/ksinn/python-telegram-bot-pagination
async def send_post_page(message, page, user_id):
    path = os.path.join("bot_data", "requested_posts", f"{user_id}.json")
    # print(path)
    with open(path, 'r', encoding='utf-8') as f:
        post_pages = json.load(f)['posts']
    # print('Title:', post_pages)
    # print('Size:', len(post_pages))

    paginator = InlineKeyboardPaginator(
        len(post_pages),
        current_page=page,
        data_pattern='post#{page}'  # always CONST
    )
    line = post_pages[page-1]  # –≤ —Å—Ç—Ä–æ—á–∫–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –æ–¥–Ω–æ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–ª—è –ª–∏—Å—Ç–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    # print(line)
    paginator.add_after(
        InlineKeyboardButton('‚ù§ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µÔ∏è', callback_data=f"addfavour_{line['id']}_{user_id}"), # by user
        InlineKeyboardButton('üíî –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ', callback_data=f"remfavour_{line['id']}_{user_id}")
    )  # by user

    headers = {
        'Authorization': 'Basic YWRtaW46YWRtaW4=',
        'Content-Type': 'application/json'
    }
    response = requests.request("GET", line['image'], headers=headers, data={})
    buttons = [
        types.InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ...", callback_data=f"detail_{line['id']}")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)

    # GET / posts / < id > / favourite_by
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –≤–∏–¥–∞ {user = < user_id >, post = < id >}
    fav_by_url = f"http://127.0.0.1:8000/posts/{line['id']}/favourite_by"
    fav_by = requests.request('GET', fav_by_url, auth=('admin', 'admin'), headers={})
    # print(fav_by_url, fav_by.status_code, fav_by.text, len(fav_by.json()))

    # —Å–æ–±–∏—Ä–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    # –¥–æ—Å—Ç–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ VK —É –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ —á–µ–∫–∞–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–≥–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞—Ü–∏–∏
    url = f"http://127.0.0.1:8000/bot_users/{line['author']}"
    author_data_response = requests.request('GET', url, headers=headers).json()
    author_tag = f"\n\n[–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram](https://t.me/{author_data_response['nickname']})\n"
    # print(author_tag)
    await message.answer_photo(photo=response.content,  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 1024 —Å–∏–º–≤–æ–ª–∞ TODO
                               caption=f"–ù–∞–∑–≤–∞–Ω–∏–µ: {line['header']}\n\n"
                                       f"–û–ø–∏—Å–∞–Ω–∏–µ: {line['description']}\n\n"
                                       f"–¶–µ–Ω–∞: {str(line['price'])}‚ÇΩ\n\n"
                                       f"–°—Ç–∞—Ç—É—Å: {statuses[line['status']]}\n\n"
                                       f"[–ù–∞–ø–∏—Å–∞—Ç—å –í–ö]({author_data_response['vk_link']})"
                                       f"{author_tag if not 'empty_tag_' in author_tag else ''}"
                                       f"\n‚ù§ –õ–∞–π–∫–æ–≤: Ô∏è{len(fav_by.json())}"  # author id
                                       f"[\u2002](http://127.0.0.1:8000/posts/{line['id']})"  # post id
                                       f"[\u2002](http://127.0.0.1:8000/bot_users/{line['author']})",

                               disable_notification=True,
                               reply_markup=paginator.markup,
                               parse_mode='Markdown')

# f"[](–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {line['id']})",


# # –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ callbacks
# # https://docs.aiogram.dev/en/latest/telegram/types/callback_query.html
@dp.callback_query_handler(Text(startswith="post"))
async def posts_page_callback(call):
    page = int(call.data.split('#')[1])
    user_id = call.from_user.id  # –≥–æ—Ç–æ–≤–æ
    await bot.delete_message(
        call.message.chat.id,
        call.message.message_id
    )
    # print("call.message", page, user_id)
    await send_post_page(call.message, page, user_id)


@dp.callback_query_handler(Text(startswith="addfavour"))
async def posts_page_favour(call):
    # print(call.data)
    url = f"http://127.0.0.1:8000/bot_users/{int(call.data.split('_')[2])}/add_favourite/"
    response = requests.request("POST", url, auth=('admin', 'admin'), headers={},
                                data={'add': int(int(call.data.split('_')[1]))})
    # print(f'Code {response.status_code}')
    if response.status_code == 200:
        await call.answer('–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚ù§Ô∏è')
    else:
        await call.answer('–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º ‚ù§Ô∏è')


@dp.callback_query_handler(Text(startswith="remfavour"))
async def posts_page_favour(call):
    url = f"http://127.0.0.1:8000/bot_users/{int(call.data.split('_')[2])}/remove_favourite/"
    response = requests.request("POST", url, auth=('admin', 'admin'), headers={},
                                data={'remove': int(int(call.data.split('_')[1]))})
    if response.status_code == 200:
        await call.answer('–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ üíîÔ∏è')
    else:
        await call.answer('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º ‚ùóÔ∏èÔ∏è')
# end of buy


@dp.message_handler(Text(equals=["–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è"]))
async def edit_profile(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–°—Å—ã–ª–∫–∞ –Ω–∞ VK", "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)


@dp.message_handler(Text(equals=["–°—Å—ã–ª–∫–∞ –Ω–∞ VK"]))
async def edit_profile(message: types.Message):
    await message.answer("–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å VK:\n\n\nWarning:–õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å—Å—ã–ª–∫–∏ –±—É–¥—É—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã.",
                         reply_markup=types.ReplyKeyboardRemove())


# –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ regexp (—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è)
# https://habr.com/ru/post/349860/
@dp.message_handler(regexp='^(http:\/\/|https:\/\/)?(www.)?(vk\.com|vkontakte\.ru)\/(id\d|[a-zA-Z0-9_.])+$')
async def edit_vk_link(message: types.Message):
    # print(message.text)
    uid = message.from_user.id  # unique id
    tag = message.from_user.username  # tag
    url = f"http://127.0.0.1:8000/bot_users/{uid}/update_vk_link/"
    # print(url)
    payload = json.dumps({
        "vk_link": message.text
    })

    headers = {  # TODO check necessity of Content-Type in headers
        'Authorization': 'Basic YWRtaW46YWRtaW4=',
        'Content-Type': 'application/json'
    }

    response = requests.request("POST", url, headers=headers, data=payload)
    # print(response.status_code)
    # print(response.text)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    keyboard.add(*buttons)
    await message.answer("–°—Å—ã–ª–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", reply_markup=keyboard)


# –ª–∏—Å—Ç–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ (–æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –í–°–Æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏)
# –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∞ –ø–æ–¥ –∫–∞–∂–¥—ã–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º —Å data = edit_{post_id}
@dp.callback_query_handler(Text(startswith="own"))
async def list_user_posts(call):

    url = f"http://127.0.0.1:8000/posts?author={call.from_user.id}"  # can be a problem
    # print(url)

    response = requests.request("GET", url, headers={}, data={})

    # print(response.text)

    lines = response.json()   # –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ—á–∫–∞ - –¥–∞–Ω–Ω—ã–µ –æ–± –æ–¥–Ω–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ —é–∑–µ—Ä–∞ –≤ JSON
    if not lines:
        # await call.message.answer("–£ –í–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        await call.answer("–£ –í–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π üòî")
        return
    # print(lines[0]['author'])

    # photo = InputFile(os.path.join(os.getcwd(), f"app/handlers/source/329581882.jpg"))
    for i in range(len(lines)):
        response = requests.request("GET", lines[i]['image'], headers={}, data={})
        buttons = [
            types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚úèÔ∏è", callback_data=f"edit_{lines[i]['id']}"),
            types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å üóë", callback_data=f"delete_{lines[i]['id']}")
            ]
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(*buttons)

        # print(lines[i])
        fav_by_url = f"http://127.0.0.1:8000/posts/{lines[i]['id']}/favourite_by"
        fav_by = requests.request('GET', fav_by_url, auth=('admin', 'admin'), headers={})

        await call.message.answer_photo(photo=response.content,  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 1024 —Å–∏–º–≤–æ–ª–∞ TODO
                                        caption=fmt.text(
                                            # fmt.hunderline() - –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å, fmt.hstrikethrough() - –∑–∞—á–µ—Ä–∫–Ω—É—Ç—å
                                            fmt.text(fmt.hbold("–ù–∞–∑–≤–∞–Ω–∏–µ:"), lines[i]['header']),
                                            fmt.text(fmt.hbold("–û–ø–∏—Å–∞–Ω–∏–µ:"), lines[i]['description']),
                                            fmt.text(fmt.hbold("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:"), categories[lines[i]['category']]),
                                            fmt.text(fmt.hbold("–¶–µ–Ω–∞:"), str(lines[i]['price']) + "‚ÇΩ"),
                                            fmt.text(fmt.hbold("–°—Ç–∞—Ç—É—Å:"), statuses[lines[i]['status']]),
                                            fmt.text(fmt.hbold("‚ù§ –õ–∞–π–∫–æ–≤:"), len(fav_by.json())),
                                            sep="\n\n"), parse_mode="HTML", disable_notification=True,
                                        reply_markup=keyboard)
        await call.answer()


# —Ä–µ–¥–∞–∫—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—Ç—Ä–∏–≥–≥–µ—Ä –Ω–∞ edit_{post["id"]})
# –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏, –≤ data –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è update_KEY_POSTID
# –∫–Ω–æ–ø–∫–∏ –≤ –Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é
@dp.callback_query_handler(Text(startswith="edit_"))
async def send_random_value(call: types.CallbackQuery):
    # await call.message.answer('–ê–ï')
    # await call.answer(text=call.data.split('_')[1], show_alert=True)
    url = f"http://127.0.0.1:8000/posts/{call.data.split('_')[1]}"
    response = requests.request("GET", url, headers={}, data={})
    # print(response.text)
    buttons = [
        types.InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"update_header_{response.json()['id']}"),
        types.InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"update_description_{response.json()['id']}"),
        types.InlineKeyboardButton(text="–¶–µ–Ω—É", callback_data=f"update_price_{response.json()['id']}"),
        types.InlineKeyboardButton(text="–°—Ç–∞—Ç—É—Å", callback_data=f"update_status_{response.json()['id']}"),
        types.InlineKeyboardButton(text="–ö–∞—Ä—Ç–∏–Ω–∫—É", callback_data=f"update_image_{response.json()['id']}")
    ]
    # –ë–ª–∞–≥–æ–¥–∞—Ä—è row_width=2, –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É –±—É–¥–µ—Ç –¥–≤–µ –∫–Ω–æ–ø–∫–∏, –∞ –æ—Å—Ç–∞–≤—à–∞—è—Å—è –æ–¥–Ω–∞
    # —É–π–¥—ë—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)

    await call.message.answer_photo(photo=requests.request("GET", response.json()['image'], headers={}, data={}).content,
                                    caption=fmt.text(
                                        # fmt.hunderline() - –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å, fmt.hstrikethrough() - –∑–∞—á–µ—Ä–∫–Ω—É—Ç—å
                                        fmt.text(fmt.hbold("–ù–∞–∑–≤–∞–Ω–∏–µ:"), response.json()['header']),
                                        fmt.text(fmt.hbold("–û–ø–∏—Å–∞–Ω–∏–µ:"), response.json()['description']),
                                        fmt.text(fmt.hbold("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:"), categories[response.json()['category']]),
                                        fmt.text(fmt.hbold("–¶–µ–Ω–∞:"), str(response.json()['price']) + "‚ÇΩ"),
                                        fmt.text(fmt.hbold("–°—Ç–∞—Ç—É—Å:"), statuses[response.json()['status']]),
                                        fmt.text(fmt.hbold('--------\n'), fmt.hitalic('–ß—Ç–æ –ø–æ–∂–µ–ª–∞–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?'),
                                                 sep=''),
                                        sep="\n\n"), parse_mode="HTML",
                                    reply_markup=keyboard)
    await call.answer()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è", "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    keyboard.add(*buttons)
    await call.message.answer("–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π üôÉ", reply_markup=keyboard)


@dp.callback_query_handler(Text(startswith="delete_"))
async def delete_post(call: types.CallbackQuery):
    url = f"http://127.0.0.1:8000/posts/{call.data.split('_')[1]}"
    response = requests.request("DELETE", url, auth=('admin', 'admin'), headers={}, data={})
    await call.answer(text="–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤ —Å–∞–º–æ–º –Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞...", show_alert=True)


# @dp.callback_query_handler(Text(startswith="update_"))
# async def send_random_value(call: types.CallbackQuery): # update_{key}_{id}
#     pass
@dp.callback_query_handler(Text(startswith="favourite_"))
async def list_favourite_posts(call):
    url = f"http://127.0.0.1:8000/bot_users/{int(call.data.split('_')[1])}/favourite/"
    response = requests.request("GET", url, auth=('admin', 'admin'), headers={})
    # print(url, response.status_code)
    # print(response.json())
    posts = []  # list of jsons
    for i in range(0, len(response.json())):
        url = f"http://127.0.0.1:8000/posts/{response.json()[i]['post']}"
        get_fav_post = requests.request("GET", url, auth=('admin', 'admin'), headers={})
        posts.append(get_fav_post.json())


    # join'–∏–º –ø—É—Ç—å –¥–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –ø—É—Ç—å –æ—Ç –Ω–µ–≥–æ –¥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ª–∏—Å—Ç–∏–Ω–≥
    with open(os.path.join("bot_data", "requested_posts", f"{call.from_user.id}.json"), 'w', encoding='utf-8') as f:
        json.dump({'posts': posts}, f)
    if not posts:
        await call.answer("–ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π!")
    else:
        await send_post_page(call.message, page=1, user_id=call.from_user.id )
        await call.answer('–û—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –∏–∑–±—Ä–∞–Ω–Ω—ã–µ ‚ù§Ô∏è')

    # {user = < id >, post = < post_id >}


async def main():
    # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    )

    register_handlers_post(dp)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    register_handlers_edit(dp)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    # register_handlers_common(dp, config.tg_bot.admin_id)
    register_handlers_common(dp, list(config.tg_bot.admin_id[1:len(config.tg_bot.admin_id)-1].split(', ')))
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    await set_commands(bot)
    await dp.start_polling()


def run_bot():
    asyncio.run(main())


if __name__ == '__main__':
    run_bot()
