from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text, IDFilter
import json
import requests

# async def cmd_start(message: types.Message, state: FSMContext):
#     await state.finish()
#     await message.answer(
#         "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å: –Ω–∞–ø–∏—Ç–∫–∏ (/drinks) –∏–ª–∏ –±–ª—é–¥–∞ (/food).",
#         reply_markup=types.ReplyKeyboardRemove()
#     )


async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove())


# –ü—Ä–æ—Å—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É,
# —á–µ–π ID —É–∫–∞–∑–∞–Ω –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
async def secret_freeze_command(message: types.Message):
    # print(json.loads(message.reply_to_message.as_json())['caption'])
    # rep = message.reply_to_message.as_json()  # old version
    rep = str(message.reply_to_message.as_json().split('http://127.0.0.1:8000/posts/')[1])
    # print(rep)
    url = 'http://127.0.0.1:8000/posts/' + (rep[0:rep.find('"')]) + '/update_status/'
    response = requests.request("POST", url, auth=('admin', 'admin'), headers={}, data={'status': 'S'})
    # print(url, response.status_code)
    await message.answer('–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ!')


async def secret_block_command(message: types.Message):
    rep = str(message.reply_to_message.as_json().split('http://127.0.0.1:8000/bot_users/')[1])
    # print(rep)
    url = 'http://127.0.0.1:8000/bot_users/' + (rep[0:rep.find('"')]) + '/update_state/'
    response = requests.request("POST", url, auth=('admin', 'admin'), headers={},
                                data={'state': 'B', 'requested_by': int(message.from_user.id)})

    # (Active | Blocked)
    if response.status_code == 200:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω üò¨!')
    else:
        await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!üò±')


def register_handlers_common(dp: Dispatcher, admin_id: list):
    # dp.register_message_handler(cmd_start, commands="start", state="*")
    dp.register_message_handler(cmd_cancel, commands="cancel", state="*")
    dp.register_message_handler(cmd_cancel, Text(equals="–æ—Ç–º–µ–Ω–∞", ignore_case=True), state="*")
    dp.register_message_handler(secret_freeze_command, IDFilter(user_id=admin_id), commands="freeze")
    dp.register_message_handler(secret_block_command, IDFilter(user_id=admin_id), commands="block")
