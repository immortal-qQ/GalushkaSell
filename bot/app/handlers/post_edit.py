from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import requests
import os
import re


class EditPost(StatesGroup):
    waiting_for_value = State()


async def send_random_value(call: types.CallbackQuery, state: FSMContext):  # update_{key}_{post_id}

    url = f"http://127.0.0.1:8000/posts/{call.data.split('_')[2]}/update_{call.data.split('_')[1]}/"
    # print(url)

    keys = {
        'price': '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, '
                 '–Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É:',
        'description': '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, '
                       '–Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É:',
        'header': '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, '
                  '–Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É:',
        'status': '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, '
                  '–Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É:',
        'image': '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, '
                  '–Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É:',
    }
    # buttons = [
    #     types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å",
    #                                callback_data=f"edit_{call.data.split('_')[2]}")
    # ]
    # keyboard = types.InlineKeyboardMarkup(row_width=2)
    # keyboard.add(*buttons)

    await state.update_data(address=url)  # –≤ address —Ö—Ä–∞–Ω–∏—Ç—Å—è url –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —á–µ–≥–æ-—Ç–æ
    await EditPost.waiting_for_value.set()
    #
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–ê–∫—Ç–∏–≤–Ω–æ", "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", "–û—Ç–º–µ–Ω–∞"] if str(call.data.split('_')[1]) == 'status' \
        else ["–û—Ç–º–µ–Ω–∞"]
    keyboard.add(*buttons)

    await call.message.answer(keys[str(call.data.split('_')[1])],
                              reply_markup=keyboard) #TODO —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å parsemode –∏ –≤–∫–∏–Ω—É—Ç—å url, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —É–∑–Ω–∞—Ç—å –∞)–°—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –µ–≥–æ –º–µ–Ω—è–µ–º –±) –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å —á–µ–∫–∞—Ç—å —Ü–∏—Ñ—Ä—É, –µ—Å–ª–∏ –º–µ–Ω—è–µ–º —Ü–µ–Ω—É
    await call.answer()


async def get_value(message: types.Message, state: FSMContext):
    # print(message.text, message.content_type)

    user_data = await state.get_data()  # –¥–æ—Å—Ç–∞—ë–º –∞–¥—Ä–µ—Å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    # print(user_data)
    url = user_data['address']
    updated = True  # –∞–ø–¥–µ–π—Ç –ø—Ä–æ—à—ë–ª –±–µ–∑ –æ—à–∏–±–æ–∫

    if message.content_type == "photo":
        path = os.path.join("bot_data", "temp_photo", f'{message.from_user.id}.jpg')
        await message.photo[-1].download(destination_file=path)
        files = [
            ('image',
             (f"{message.from_user.id}.jpg",  # join –ø—É—Ç—å –¥–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –ø—É—Ç—å –æ—Ç –Ω–µ–≥–æ –¥–æ —Ñ–æ—Ç–∫–∏ —é–∑–µ—Ä–∞
              open(os.path.join("bot_data", "temp_photo", f'{message.from_user.id}.jpg'), 'rb'),
              'image/jpeg'))
        ]
        headers = {
            'Authorization': 'Basic YWRtaW46YWRtaW4=',
        }
        response = requests.request("POST", url, headers=headers, data={}, files=files)
        # print(response.text)
        await state.finish()

    elif message.text == '–û—Ç–º–µ–Ω–∞':
        post_id = (str(url.split('posts/')[1]).split('/')[0])
        buttons = [
            types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è ‚úèÔ∏è",
                                       callback_data=f"edit_{post_id}")
        ]
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(*buttons)
        await message.answer('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=keyboard)

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è", "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        keyboard.add(*buttons)
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π üôÉ", reply_markup=keyboard)

        await state.finish()
        return
    else:
        await state.update_data(value=message.text)
        statuses = {
            '–ê–∫—Ç–∏–≤–Ω–æ': 'A',
            '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ': 'S'
        }
        try:
            data = {
                str(url.split('_')[1][0:len(url.split('_')[1]) - 1]): statuses[message.text]
            }
        except KeyError:
            data = {
                str(url.split('_')[1][0:len(url.split('_')[1]) - 1]): message.text
            }

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ, –µ—Å–ª–∏ –º–µ–Ω—è–µ–º —Ü–µ–Ω—É
        try:
            if re.fullmatch(r'\d{1,7}', data['price']) is None:
                updated = False
            else:
                data['price'] = int(data['price'])
                error = data[' ']
        except KeyError:
            response = requests.request("POST", url, auth=('admin', 'admin'), data=data)
            # print(url, data, response.status_code)

        await state.finish()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–µ—à–Ω–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–≤—ã—Ö–æ–¥ –≤ main –ø–æ callback)
    post_id = (str(url.split('posts/')[1]).split('/')[0])
    buttons = [
        types.InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç!", callback_data=f"edit_{post_id}")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    if updated:
        await message.answer('–î–∞–Ω–Ω—ã–µ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ‚úÖ', reply_markup=keyboard)
    else:
        await message.answer('–ë—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚ùå', reply_markup=keyboard)


def register_handlers_edit(dp: Dispatcher):
    dp.register_callback_query_handler(send_random_value, lambda call: call.data.startswith('update'), state="*")  # Text(startswith="update_")
    dp.register_message_handler(get_value, content_types=["text", "photo"], state=EditPost.waiting_for_value)
