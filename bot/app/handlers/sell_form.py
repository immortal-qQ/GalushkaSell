from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import requests
import re
import os


# https://tproger.ru/translations/finite-state-machines-theory-and-implementation/
class CreatePost(StatesGroup):
    waiting_for_category = State()
    waiting_for_subcategory = State()
    waiting_for_post_header = State()
    waiting_for_post_description = State()
    waiting_for_photo = State()
    waiting_for_post_price = State()


async def category_choosing(message: types.Message):  # "–ü—Ä–æ–¥–∞—Ç—å" | –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    # print(message.text, 'IN sell_start')
    headers = {
        'Content-Type': 'application/json'
    }
    url = f"http://127.0.0.1:8000/bot_users/{message.from_user.id}"
    response = requests.request("GET", url, headers=headers)
    if response.json()["state"] == 'A':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–°—ä–µ–¥–æ–±–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", "–ù–µ—Å—ä–µ–¥–æ–±–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", "–£—Å–ª—É–≥–∏", "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]
        keyboard.add(*buttons)
        await message.answer(
            "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞—á–∞—Ç–æ —É—Å–ø–µ—à–Ω–æ!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –í–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=keyboard)
        await CreatePost.waiting_for_category.set()  # —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–ö—É–ø–∏—Ç—å", "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        keyboard.add(*buttons)
        await message.answer("Abuse —ç—Ç–æ –ø–ª–æ—Ö–æ!", reply_markup=keyboard)


async def category_chosen(message: types.Message, state: FSMContext):  # –í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    # print(message.text, 'IN sell_manage')
    if message.text == '–°—ä–µ–¥–æ–±–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–ê–ª–∫–æ–≥–æ–ª—å üç∑", "–ê–ø—Ç–µ–∫–∞ üíä", "–ù–∞–ø–∏—Ç–∫–∏ ü•§", "–ú–æ–ª–æ—á–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è ü•õ", "–î—Ä—É–≥–∏–µ —Å—ä–µ–¥–æ–±–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ‚ùî", "–û—Ç–º–µ–Ω–∞ ‚ùå"]
        keyboard.add(*buttons)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –í–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboard)
        await CreatePost.waiting_for_subcategory.set()  # —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ I

    elif message.text == '–ù–µ—Å—ä–µ–¥–æ–±–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–¢–∞–±–∞—á–∫–∞ üö¨", "–ê–ø—Ç–µ–∫–∞ ü•°", "–î—Ä—É–≥–∏–µ –Ω–µ—Å—ä–µ–¥–æ–±–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ‚ùî", "–û—Ç–º–µ–Ω–∞ ‚ùå"]
        keyboard.add(*buttons)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –í–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboard)
        await CreatePost.waiting_for_subcategory.set()

    elif message.text == '–£—Å–ª—É–≥–∏':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏ ‚ùî", "–û—Ç–º–µ–Ω–∞ ‚ùå"]
        keyboard.add(*buttons)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –í–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboard)
        await CreatePost.waiting_for_subcategory.set()

    elif message.text == '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        await state.finish()
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–ö—É–ø–∏—Ç—å", "–ü—Ä–æ–¥–∞—Ç—å", "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        keyboard.add(*buttons)
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π...",
                             reply_markup=keyboard)


async def subcategory_chosen(message: types.Message, state: FSMContext):  # state "category_chosen"
    # print(message.text, 'IN final_category')
    if message.text == '–û—Ç–º–µ–Ω–∞ ‚ùå':
        await state.finish()
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–ö—É–ø–∏—Ç—å", "–ü—Ä–æ–¥–∞—Ç—å", "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        keyboard.add(*buttons)
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π...",
                             reply_markup=keyboard)
        return

    available_names = ["–ê–ª–∫–æ–≥–æ–ª—å üç∑", "–ê–ø—Ç–µ–∫–∞ üíä", "–ù–∞–ø–∏—Ç–∫–∏ ü•§", "–ú–æ–ª–æ—á–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è ü•õ",
                       "–î—Ä—É–≥–∏–µ —Å—ä–µ–¥–æ–±–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ‚ùî", "–¢–∞–±–∞—á–∫–∞ üö¨", "–ê–ø—Ç–µ–∫–∞ ü•°",
                       "–î—Ä—É–≥–∏–µ –Ω–µ—Å—ä–µ–¥–æ–±–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ‚ùî", "–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏ ‚ùî"]
    if message.text in available_names:
        await state.update_data(person_id=message.from_user.id, chosen_category=message.text)
    else:
        print('Error: Category key word was not recognized')
        await message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!")
        return

    await state.update_data(chosen_category=message.text)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–û—Ç–º–µ–Ω–∞ ‚ùå"]
    keyboard.add(*buttons)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    await CreatePost.waiting_for_post_header.set()  # —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –µ—Å—Ç—å –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç
async def post_header_chosen(message: types.Message, state: FSMContext):
    # print(message.text, 'IN post_header_chosen')
    if message.text == '–û—Ç–º–µ–Ω–∞ ‚ùå':
        await state.finish()
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–ö—É–ø–∏—Ç—å", "–ü—Ä–æ–¥–∞—Ç—å", "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        keyboard.add(*buttons)
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π...",
                             reply_markup=keyboard)
        return
    # –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤ –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –æ–±—Ö–æ–¥—è—Å—å next()
    await state.update_data(chosen_header=message.text)
    await CreatePost.next()  # –í—Å—Ç–∞—ë–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ III

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–û—Ç–º–µ–Ω–∞ ‚ùå"]
    keyboard.add(*buttons)
    # reply_markup=types.ReplyKeyboardRemove()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –í–∞—à–µ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é:", reply_markup=keyboard)


#
async def post_description_chosen(message: types.Message, state: FSMContext):
    # print(message.text, 'IN post_description_chosen')
    if message.text == '–û—Ç–º–µ–Ω–∞ ‚ùå':
        await state.finish()
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–ö—É–ø–∏—Ç—å", "–ü—Ä–æ–¥–∞—Ç—å", "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        keyboard.add(*buttons)
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π...",
                             reply_markup=keyboard)
        return
    await state.update_data(chosen_description=message.text)
    await CreatePost.waiting_for_photo.set()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–û—Ç–º–µ–Ω–∞ ‚ùå"]
    keyboard.add(*buttons)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:", reply_markup=keyboard)


# –¢–∏–ø—ã —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–æ–∂–µ –º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ-—Ä–∞–∑–Ω–æ–º—É.
async def photo_chosen(message: types.Message, state: FSMContext):
    # print(message.text, 'IN photo_chosen')
    # print(message.content_type)
    # —Å–æ–∑–¥–∞–¥–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–û—Ç–º–µ–Ω–∞ ‚ùå"]
    keyboard.add(*buttons)

    if message.text == '–û—Ç–º–µ–Ω–∞ ‚ùå':
        await state.finish()
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–ö—É–ø–∏—Ç—å", "–ü—Ä–æ–¥–∞—Ç—å", "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        keyboard.add(*buttons)
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π...",
                             reply_markup=keyboard)
        return
    if message.content_type == 'photo':

        path = os.path.join("bot_data", "temp_photo", f'{message.from_user.id}.jpg')
        await message.photo[-1].download(destination_file=path)
        # print(message.photo[-1].file_id, message.photo[-1].file_unique_id)

        await state.update_data(chosen_photo=os.path.join("bot_data", "temp_photo", f"{message.from_user.id}.jpg"))
        await CreatePost.next()
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–≤ —Ä—É–±–ª—è—Ö) –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:", reply_markup=keyboard)
        return
    # –µ—Å–ª–∏ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –ø–æ–º–∏–º–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –û—Ç–º–µ–Ω–∞ ‚ùå
    await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!", reply_markup=keyboard)
    return


async def post_price_chosen(message: types.Message, state: FSMContext):
    # print(message.text, 'IN post_price_chosen')
    if message.text == '–û—Ç–º–µ–Ω–∞ ‚ùå':
        await state.finish()
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–ö—É–ø–∏—Ç—å", "–ü—Ä–æ–¥–∞—Ç—å", "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        keyboard.add(*buttons)
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π...",
                             reply_markup=keyboard)
        return
    if re.fullmatch(r'\d{1,7}', message.text) is None:

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–û—Ç–º–µ–Ω–∞ ‚ùå"]
        keyboard.add(*buttons)
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!", reply_markup=keyboard)
        return
    await state.update_data(chosen_price=message.text.lower())

    user_data = await state.get_data()  # –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç –∫ –∑–∞–ø–∏—Å–∞–ª–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    categories = {
        "–ê–ª–∫–æ–≥–æ–ª—å üç∑": 2,
        "–ê–ø—Ç–µ–∫–∞ üíä": 13,
        "–ù–∞–ø–∏—Ç–∫–∏ ü•§": 5,
        "–ú–æ–ª–æ—á–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è ü•õ": 4,
        "–î—Ä—É–≥–∏–µ —Å—ä–µ–¥–æ–±–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ‚ùî": 6,
        "–¢–∞–±–∞—á–∫–∞ üö¨": 8,
        "–ê–ø—Ç–µ–∫–∞ ü•°": 3,
        "–î—Ä—É–≥–∏–µ –Ω–µ—Å—ä–µ–¥–æ–±–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ‚ùî": 9,
        "–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏ ‚ùî": 11
    }
    # POST
    url = "http://127.0.0.1:8000/posts/"
    payload = {
        'author': user_data['person_id'],
        'category': categories[user_data['chosen_category']],
        'price': user_data['chosen_price'],
        'header': user_data['chosen_header'],
        'description': user_data['chosen_description'],
        'status': "A"
    }

    files = [
        ('image', (f"{user_data['person_id']}.jpg",  # join'–∏–º –ø—É—Ç—å –¥–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –ø—É—Ç—å –æ—Ç –Ω–µ–≥–æ –¥–æ —Ñ–æ—Ç–∫–∏ —é–∑–µ—Ä–∞
                   open(os.path.join("bot_data", "temp_photo", f'{user_data["person_id"]}.jpg'), 'rb'),
                   'image/jpeg'))
    ]
    headers = {
            'Authorization': 'Basic YWRtaW46YWRtaW4=',
    }

    response = requests.request("POST", url, headers=headers, data=payload, files=files)
    # print(response.text)
    # print(user_data) # —Ç–æ, —á—Ç–æ –Ω–∞—Å–æ–±–∏—Ä–∞–ª FSM

    buttons = [
        types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data=f"edit_{response.json()['id']}")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    await message.answer('–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!', reply_markup=keyboard)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–ö—É–ø–∏—Ç—å", "–ü—Ä–æ–¥–∞—Ç—å", "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    keyboard.add(*buttons)
    await message.answer("–ß—Ç–æ –ø–æ–∂–µ–ª–∞–µ—Ç–µ?", reply_markup=keyboard)
    await state.finish()


# –ø—Ä–æ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ:
# https://docs.aiogram.dev/en/latest/dispatcher/filters.html#making-own-filters-custom-filters
def register_handlers_post(dp: Dispatcher):
    dp.register_message_handler(category_choosing, lambda msg: msg.text.lower() == '–ø—Ä–æ–¥–∞—Ç—å', state="*")
    dp.register_message_handler(category_chosen, state=CreatePost.waiting_for_category)
    dp.register_message_handler(subcategory_chosen, state=CreatePost.waiting_for_subcategory)
    dp.register_message_handler(post_header_chosen, state=CreatePost.waiting_for_post_header)
    dp.register_message_handler(post_description_chosen, state=CreatePost.waiting_for_post_description)
    dp.register_message_handler(photo_chosen, content_types=["text", "photo"], state=CreatePost.waiting_for_photo)
    dp.register_message_handler(post_price_chosen, state=CreatePost.waiting_for_post_price)
